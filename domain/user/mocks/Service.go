// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	request "dealljobs/domain/request"

	mock "github.com/stretchr/testify/mock"

	user "dealljobs/domain/user"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateUserIfNotAny provides a mock function with given fields: req
func (_m *Service) CreateUserIfNotAny(req request.CreateUserRequest) (*user.User, error) {
	ret := _m.Called(req)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(request.CreateUserRequest) *user.User); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.CreateUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *Service) DeleteUser(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *Service) GetAllUsers() []*user.User {
	ret := _m.Called()

	var r0 []*user.User
	if rf, ok := ret.Get(0).(func() []*user.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.User)
		}
	}

	return r0
}

// GetUser provides a mock function with given fields: id
func (_m *Service) GetUser(id int) *user.User {
	ret := _m.Called(id)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(int) *user.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	return r0
}

// Login provides a mock function with given fields: username, password
func (_m *Service) Login(username string, password string) (*user.User, string, error) {
	ret := _m.Called(username, password)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(string, string) *user.User); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(username, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUser provides a mock function with given fields: req
func (_m *Service) UpdateUser(req request.UpdateUserRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(request.UpdateUserRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
